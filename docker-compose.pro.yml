version: '3.5'

networks:

    proxy:
        name: proxy
    micros:
        name: micros
    db:
        name: db

services:

    api:
        build: ./services/api
        image: food_api:pro
        command: npm run start
        environment:
            NODE_ENV: production
            AMQP_URI: amqp://rabbitmq
            API_PORT: 3000
        volumes:
            - ./services/api/src:/app/src
        labels:
            - "traefik.docker.network=proxy"
            - "traefik.backend=api.local"
            - "traefik.frontend.rule=Host:api.local"
            - "traefik.port=3000"
            - "traefik.enable=true"
        restart: always
        networks:
            - micros
            - proxy

    orchestrator: ./services/orchestrator
        image: food_orchestrator:pro
        command: npm run start
        environment:
            NODE_ENV: production
            AMQP_URI: amqp://rabbitmq
        volumes:
            - ./services/orchestrator/src:/app/src
        restart: always
        depends_on:
            - rabbitmq
        networks:
            - micros

    user:
        build: ./services/user
        image: food_user:pro
        command: npm run start
        environment:
            NODE_ENV: production
            AMQP_URI: amqp://rabbitmq
            MONGODB_HOST: mongodb://mongodb
            MONGODB_DB: food-test
            JWT_SECRET: JWT_API_SECRET
        volumes:
            - ./services/user/src:/app/src
        restart: always
        depends_on:
            - rabbitmq
            - mongodb
        networks:
            - micros
            - db

    restaurant:
        build: ./services/restaurant
        image: food_restaurant:pro
        command: npm run start
        environment:
            NODE_ENV: production
            AMQP_URI: amqp://rabbitmq
            MONGODB_HOST: mongodb://mongodb
            MONGODB_DB: food-test
            JWT_SECRET: JWT_API_SECRET
        volumes:
            - ./services/restaurant/src:/app/src
        restart: always
        depends_on:
            - rabbitmq
            - mongodb
        networks:
            - micros
            - db

    mongodb:
        image: mvertes/alpine-mongo
        volumes:
            - ./data/mongodb:/data/db
        networks:
            - db
    
    rabbitmq:
        image: rabbitmq:3-management
        hostname: rabbitmq
        volumes:
            - ./data/rabbitmq:/var/lib/rabbitmq/mnesia/rabbit@rabbitmq
        labels:
            - "traefik.docker.network=proxy"
            - "traefik.backend=rabbitmq.local"
            - "traefik.frontend.rule=Host:rabbitmq.local"
            - "traefik.port=15672"
            - "traefik.enable=true"
        restart: always
        networks:
            - micros
            - proxy

    traefik:
        image: traefik
        ports:
        - 80:80
        - 443:443
        - 8080:8080
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./config/traefik/traefik-pro.toml:/etc/traefik/traefik.toml
        restart: always
        networks:
            - proxy